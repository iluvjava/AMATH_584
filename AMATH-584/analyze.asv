clear all; close all; clc; 

% Get files
dirinfo = dir("yale-faces\yalefaces_cropped\CroppedYale\**");
dirinfo([dirinfo.isdir]) = [];

% Meta Setting
TRAINING_SET = 1: length(dirinfo);

% Get Matrices 
Matrices = cell(1, length(TRAINING_SET));
for I = TRAINING_SET
    TheImage = imread(strcat(dirinfo(I).folder, "\", dirinfo(I).name), "pgm");
    ImageSize = size(TheImage);
    Matrices{I} = TheImage;
end
% imshow(Matrices{100})

%% 
% Put them into a big matrix 
ColumnDataMatrix = zeros(size(Matrices{1}, 1)*size(Matrices{1}, 2), length(Matrices));
Column = 1;
for Matrix = Matrices
    Matrix = Matrix{1};
    ColumnDataMatrix(:, Column) = ... 
        reshape(Matrix, [size(Matrix, 1)*size(Matrix, 2), 1]);
    Column = Column + 1;
end
clearvars -except ColumnDataMatrix ImageSize;

%% 
% Time for Maths. 
hold on;

ImageTotalDataPoints = size(ColumnDataMatrix, 1);
NumberofImages = size(ColumnDataMatrix, 2);
TotalAverage = (ColumnDataMatrix*ones(NumberofImages, 1))/NumberofImages;

figure; image(reshape(TotalAverage, [ImageSize(1) ImageSize(2)]));
title("Your Average Matrix Creepy Face");

[U, S, V] = svd(ColumnDataMatrix - TotalAverage, 'econ');

%% Look at the singular values 

figure;
subplot(2, 1, 1);
plot(1:length(diag(S)), log(diag(S)), '-o');
title("All of The Singular Values");
ylabel("Log(\sigma_i)")

subplot(2, 1, 2);
SingularVals = log(diag(S));
plot(1:200, SingularVals(1:200), '-o');
title("the first 200 Singular values");
ylabel("Log(\sigma_i)")



%% Look at the Basis in U

figure;
title("Basis in U");

for I = 1:16
   subplot(4, 4, I);
   ImgArr = U(:, I);
   imshow(ArrayToGrayScale(ImgArr, ImageSize));
end



%% reconstructions For Known Faces 
% define good constants: 
NUMBER_OF_RANDOM_FACES = 3;
RECONSTRUCTION_RANK = 200

% Reconstruct for faces inside of the known data set. 
U_tild = U(:, 1: RECONSTRUCTION_RANK);
S_tild = S(:, 1: RECONSTRUCTION_RANK); 
V_tild = V(:, 1: RECONSTRUCTION_RANK);  % Careful about here, because USV^T
RandomFaces = ...
    randi([0 size(ColumnDataMatrix, 2)], 1, NUMBER_OF_RANDOM_FACES); 
RandomFaces = ColumnDataMatrix(:, RandomFaces);
figure;
for I = 1: NUMBER_OF_RANDOM_FACES
    FaceID  = RandomFaces(I);
    TheFace = RandomFaces(FaceID);
    TheFace = ColumnDataMatrix(:, TheFace); 
    subplot(2, NUMBER_OF_RANDOM_FACES, I);
    imshow(ArrayToGrayScale(TheFace, ImageSize))
    ToReconstruct = V_tild(:, FaceID);
    ToReconstruct = U_tild*S_tild*ToReconstruct.'
    
end













